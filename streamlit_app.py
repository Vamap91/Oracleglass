import streamlit as st
import os
import pypdf
from io import BytesIO
import time
from datetime import datetime
import base64
import pandas as pd

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Or√°culo - Sistema de Consulta Inteligente",
    page_icon="üöó",
    layout="wide"
)

# Vari√°veis globais
PDF_PATH = "data/Guia R√°pido.pdf"
VALIDATION_OK = True
VALIDATION_MESSAGES = {}

# Inicializar vari√°veis de sess√£o
if "pdf_text" not in st.session_state:
    st.session_state.pdf_text = ""
if "history" not in st.session_state:
    st.session_state.history = []
if "model" not in st.session_state:
    st.session_state.model = "gpt-3.5-turbo"  # Modelo padr√£o mais econ√¥mico

def validate_environment():
    """Valida todo o ambiente necess√°rio para funcionamento do sistema"""
    global VALIDATION_OK, VALIDATION_MESSAGES
    
    # Resetar estado
    VALIDATION_OK = True
    VALIDATION_MESSAGES = {}
    
    # 1. Validar chave OpenAI - Verifica√ß√£o mais segura
    try:
        import openai
        # Definir API key explicitamente antes de verificar
        openai.api_key = st.secrets["OPENAI_API_KEY"]
        VALIDATION_MESSAGES["openai_key"] = "OK"
    except Exception as e:
        VALIDATION_OK = False
        VALIDATION_MESSAGES["openai_key"] = f"Erro ao verificar API key: {str(e)}"
    
    # 2. Verificar exist√™ncia do PDF
    if not os.path.exists(PDF_PATH):
        VALIDATION_OK = False
        VALIDATION_MESSAGES["pdf_exists"] = f"Arquivo {PDF_PATH} n√£o encontrado. Verifique o reposit√≥rio GitHub."
    else:
        VALIDATION_MESSAGES["pdf_exists"] = "OK"
    
    # 3. Validar extra√ß√£o de texto
    if VALIDATION_MESSAGES.get("pdf_exists") == "OK":
        try:
            st.session_state.pdf_text = extract_text_from_pdf(PDF_PATH)
            if not st.session_state.pdf_text or len(st.session_state.pdf_text) < 10:
                VALIDATION_OK = False
                VALIDATION_MESSAGES["text_extraction"] = "N√£o foi poss√≠vel extrair texto v√°lido do PDF."
            else:
                VALIDATION_MESSAGES["text_extraction"] = "OK"
        except Exception as e:
            VALIDATION_OK = False
            VALIDATION_MESSAGES["text_extraction"] = f"Erro ao extrair texto: {str(e)}"
    else:
        VALIDATION_OK = False
        VALIDATION_MESSAGES["text_extraction"] = "N√£o foi poss√≠vel extrair texto sem o arquivo PDF."
    
    # 4. Verificar depend√™ncias
    try:
        import pypdf
        import openai
        VALIDATION_MESSAGES["dependencies"] = "OK"
    except ImportError as e:
        VALIDATION_OK = False
        VALIDATION_MESSAGES["dependencies"] = f"Depend√™ncia faltando: {str(e)}"
    
    return VALIDATION_OK

def extract_text_from_pdf(pdf_path):
    """Extrai texto de um arquivo PDF com m√©todo melhorado para preservar estrutura"""
    text_content = ""
    try:
        # Abrir o arquivo PDF
        reader = pypdf.PdfReader(pdf_path)
        
        # Iterar por todas as p√°ginas
        for page_num, page in enumerate(reader.pages):
            # Extrair o texto com configura√ß√µes para preservar layout
            page_text = page.extract_text() or ""
            
            # Adicionar n√∫mero da p√°gina e texto
            text_content += f"\n--- P√°gina {page_num+1} ---\n{page_text}\n"
            
            # Tentar extrair tabelas e conte√∫do estruturado (abordagem simples)
            lines = page_text.split('\n')
            for i, line in enumerate(lines):
                # Detectar poss√≠veis n√∫meros de telefone
                if ('0800' in line or '4004' in line or 
                    'telefone' in line.lower() or 'contato' in line.lower() or
                    '-' in line and any(c.isdigit() for c in line)):
                    # Adicionar linhas ao redor para contexto
                    start_idx = max(0, i-2)
                    end_idx = min(len(lines), i+3)
                    context_lines = lines[start_idx:end_idx]
                    text_content += "\n--- INFORMA√á√ÉO DE CONTATO DETECTADA ---\n"
                    text_content += "\n".join(context_lines) + "\n"
                    text_content += "--- FIM DA INFORMA√á√ÉO DE CONTATO ---\n"
    
    except Exception as e:
        st.error(f"Erro ao processar PDF: {str(e)}")
    
    return text_content

def query_ai(query):
    """Processa uma consulta usando a API da OpenAI - Compat√≠vel com vers√£o 1.0+"""
    try:
        # Importar OpenAI dentro da fun√ß√£o para evitar erros de escopo
        import openai
        
        # Cliente OpenAI para v1.0+
        client = openai.OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
        
        # Limitar o contexto para reduzir custos, mas aumentar para consultas espec√≠ficas
        # Aumentar limite para consultas sobre contatos/telefone
        max_length = 10000  # Aumentado para capturar mais conte√∫do
        if any(termo in query.lower() for termo in ['telefone', 'contato', 'azul', 'seguro', 'n√∫mero']):
            max_length = 15000  # Aumentar ainda mais para consultas sobre contatos
        
        context = st.session_state.pdf_text[:max_length]
        
        # Instru√ß√£o mais espec√≠fica para o modelo
        system_prompt = """
        Voc√™ √© um assistente especializado em fornecer informa√ß√µes sobre ve√≠culos e servi√ßos automotivos.
        
        IMPORTANTE:
        1. Responda apenas com base nas informa√ß√µes dispon√≠veis no documento fornecido.
        2. Procure cuidadosamente por n√∫meros de telefone, especialmente sequ√™ncias como 0800, 4004, etc.
        3. Se alguma informa√ß√£o parecer incompleta no documento, mencione isso na resposta.
        4. Para consultas sobre contatos, verifique todas as se√ß√µes do documento, n√£o apenas os t√≠tulos.
        5. Se a informa√ß√£o n√£o estiver presente, informe claramente.
        """
        
        # Chamada da API atualizada para v1.0+
        response = client.chat.completions.create(
            model=st.session_state.model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Com base no documento a seguir, responda √† pergunta: '{query}'\n\nConte√∫do do documento:\n{context}"}
            ],
            temperature=0.2,  # Reduzido para maior precis√£o factual
            max_tokens=800
        )
        
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Erro ao processar consulta: {str(e)}")
        return None

def export_to_csv():
    """Exporta o hist√≥rico para CSV"""
    if not st.session_state.history:
        st.warning("N√£o h√° consultas para exportar.")
        return None, None
    
    # Criar DataFrame com o hist√≥rico
    data = []
    for item in st.session_state.history:
        data.append({
            "Data e Hora": item.get("timestamp", ""),
            "Pergunta": item.get("query", ""),
            "Resposta": item.get("answer", ""),
            "Modelo": item.get("model", "")
        })
    
    df = pd.DataFrame(data)
    csv = df.to_csv(index=False).encode('utf-8')
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"oraculo_historico_{timestamp}.csv"
    
    return csv, filename

# Visualizar texto extra√≠do no modo de depura√ß√£o
def show_extracted_text():
    """Exibe o texto extra√≠do para depura√ß√£o"""
    if st.session_state.pdf_text:
        st.text_area("Texto Extra√≠do do PDF", st.session_state.pdf_text, height=400)
    else:
        st.warning("Nenhum texto extra√≠do ainda.")

# Validar ambiente na inicializa√ß√£o
validate_environment()

# Interface principal
st.title("üöó Or√°culo - Sistema de Consulta Inteligente")

# Barra lateral com valida√ß√µes e configura√ß√µes
with st.sidebar:
    st.header("‚öôÔ∏è Valida√ß√£o do Sistema")
    
    # Status de valida√ß√£o da chave OpenAI
    openai_status = "‚úÖ" if VALIDATION_MESSAGES.get("openai_key") == "OK" else "‚ùå"
    st.write(f"{openai_status} **Chave OpenAI**: {VALIDATION_MESSAGES.get('openai_key')}")
    
    # Status de valida√ß√£o do PDF
    pdf_status = "‚úÖ" if VALIDATION_MESSAGES.get("pdf_exists") == "OK" else "‚ùå"
    st.write(f"{pdf_status} **PDF Carregado**: {VALIDATION_MESSAGES.get('pdf_exists')}")
    
    # Status de extra√ß√£o de texto
    text_status = "‚úÖ" if VALIDATION_MESSAGES.get("text_extraction") == "OK" else "‚ùå"
    st.write(f"{text_status} **Texto Extra√≠do**: {VALIDATION_MESSAGES.get('text_extraction')}")
    
    # Status de depend√™ncias
    dep_status = "‚úÖ" if VALIDATION_MESSAGES.get("dependencies") == "OK" else "‚ùå"
    st.write(f"{dep_status} **Depend√™ncias**: {VALIDATION_MESSAGES.get('dependencies')}")
    
    # Informa√ß√µes do PDF
    if VALIDATION_OK:
        st.divider()
        st.subheader("üìÑ Informa√ß√µes do PDF")
        st.write(f"Arquivo: {os.path.basename(PDF_PATH)}")
        st.write(f"Tamanho do texto: {len(st.session_state.pdf_text)} caracteres")
        
        # Configura√ß√µes de modelo - ATUALIZADO COM MAIS OP√á√ïES
        st.divider()
        st.subheader("‚öôÔ∏è Configura√ß√µes")
        
        model = st.selectbox(
            "Modelo OpenAI:",
            options=[
                "gpt-3.5-turbo",      # Modelo b√°sico, bom custo-benef√≠cio
                "gpt-4",              # Melhor qualidade, mais caro
                "gpt-4-turbo",        # Melhor performance que GPT-4 com custo menor
                "gpt-4o",             # GPT-4 Omni - modelo mais recente
                "gpt-3.5-turbo-16k",  # Vers√£o com contexto maior
                "gpt-4-32k",          # GPT-4 com contexto de 32k tokens
            ],
            index=0,  # Default para o modelo mais econ√¥mico
            help="Selecione o modelo da OpenAI. GPT-3.5 √© mais r√°pido e econ√¥mico, GPT-4 √© mais preciso, modelos com n√∫mero maior suportam mais contexto."
        )
        
        # Atualizar o modelo selecionado
        if model != st.session_state.model:
            st.session_state.model = model
            st.info(f"Modelo alterado para {model}")
        
        # Bot√£o para exportar hist√≥rico
        st.divider()
        st.subheader("üìä Exportar Hist√≥rico")
        
        export_button = st.button("üì• Exportar Consultas para CSV")
        if export_button:
            csv_data, filename = export_to_csv()
            if csv_data is not None and filename is not None:
                st.download_button(
                    label="‚¨áÔ∏è Baixar CSV",
                    data=csv_data,
                    file_name=filename,
                    mime="text/csv",
                )
        
        # Modo de depura√ß√£o para visualizar o texto extra√≠do
        st.divider()
        st.subheader("üîç Depura√ß√£o")
        if st.button("Visualizar Texto Extra√≠do"):
            show_extracted_text()

# Conte√∫do principal - Sempre exibir, independente da valida√ß√£o
st.write("Digite sua pergunta sobre ve√≠culos e clique em 'Consultar'.")

# Campo de consulta
query = st.text_input("‚ùì Sua pergunta:", key="query_input")

# Bot√£o de consulta
consult_button = st.button("üîç Consultar", key="query_button", disabled=not VALIDATION_OK)
if consult_button and query:
    with st.spinner("Processando consulta..."):
        answer = query_ai(query)
        
        if answer:
            st.divider()
            st.subheader("üìù Resposta:")
            st.markdown(answer)
            
            # Adicionar ao hist√≥rico com timestamp
            st.session_state.history.append({
                "query": query,
                "answer": answer,
                "model": st.session_state.model,
                "timestamp": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            })

# Hist√≥rico de consultas - sempre mostrar se houver itens
if st.session_state.history:
    st.divider()
    st.subheader("üìã Hist√≥rico de Consultas")
    
    for i, item in enumerate(reversed(st.session_state.history)):
        question = item.get("query", "")
        with st.expander(f"Pergunta ({i+1}): {question}"):
            st.markdown(f"**Data e Hora:** {item.get('timestamp', '')}")
            st.markdown(f"**Modelo:** {item.get('model', '')}")
            st.markdown("**Resposta:**")
            st.markdown(item.get('answer', ''))
